fun allocate_ints(count: i32) >> ptr<i32> {
    return @malloc(count * 4) as ptr<i32>;
}

fun resize_ints(old_ptr: ptr<i32>, new_count: i32) >> ptr<i32> {
    return @realloc(old_ptr, new_count * 4) as ptr<i32>;
}

fun free_ints(ptr: ptr<i32>) >> void {
    @free(ptr);
}

fun fill_array(arr: ptr<i32>, size: i32, value: i32) >> void {
    i32 i = 0;
    for {
        arr[i] = value;
        i = i + 1;
        if i >= size {break;}
    }
}

fun print_array(arr: ptr<i32>, size: i32) >> void {
    @printf("[");
    i32 i = 0;
    for {
        if i > 0 {
            @printf(", ");
        }
        @printf("%d", arr[i]);
        i = i + 1;
        if i >= size {break;}
    }
    @printf("]\n");
}

fun sum_array(arr: ptr<i32>, size: i32) >> i32 {
    i32 total = 0;
    i32 i = 0;
    for {
        total = total + arr[i];
        i = i + 1;
        if i >= size {break;}
    }
    return total;
}

fun main() >> i32 {
    @printf("=== Dynamic Memory Allocation Example ===\n\n");
    
    i32 initial_size = 5;
    ptr<i32> numbers = allocate_ints(initial_size);
    
    @printf("Step 1: Allocated array of size %d\n", initial_size);
    i32 i = 0;
    for {
        numbers[i] = (i + 1) * 10;
        i = i + 1;
        if i >= initial_size {break;}
    }
    print_array(numbers, initial_size);
    
    i32 new_size = 10;
    @printf("\nStep 2: Resizing to %d elements\n", new_size);
    numbers = resize_ints(numbers, new_size);
    
    i = initial_size;
    for {
        numbers[i] = (i + 1) * 10;
        i = i + 1;
        if i >= new_size {break;}
    }
    print_array(numbers, new_size);
    
    @printf("\nStep 3: Sum of all elements: %d\n", sum_array(numbers, new_size));
    
    @printf("\nStep 4: Allocating second array\n");
    ptr<i32> squares = allocate_ints(5);
    i = 0;
    for {
        squares[i] = (i + 1) * (i + 1);
        i = i + 1;
        if i >= 5 {break;}
    }
    @printf("Squares: ");
    print_array(squares, 5);
    
    @printf("\nStep 5: Freeing memory\n");
    free_ints(numbers);
    free_ints(squares);
    @printf("All memory freed successfully\n");
    
    return 0;
}
