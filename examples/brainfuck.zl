fun main() >> i32 {
    u8 inp;
    arr<u8, 200000> mem;
    arr<u8, 100000> code;
    arr<i32, 100000> jump_table;  ?? Pre-computed jump table for brackets
    i32 mem_ptr = 0;
    i32 code_ptr = 0;
    i32 code_len = 0;
    
    ?? Initialize arrays more efficiently
    for i32 inc = 0; inc < 100000; inc++ {
        code[inc] = 0;
        jump_table[inc] = -1;
    }
    for i32 inc2 = 0; inc2 < 200000; inc2++ {
        mem[inc2] = 0;
    }
    
    @printf("Paste Brainfuck code and press enter:\n");
    for {
        if @scanf("%c", &inp) != 1 {break;}
        if inp == 10 {break;}
        if code_ptr >= 100000 {
            @printf("Error: Code input exceeded maximum size (100000)\n");
            return 1;
        }
        code[code_ptr] = inp;
        code_ptr++;
    }
    code_len = code_ptr;
    
    @printf("\nInput code:\n");
    for i32 i = 0; i < code_len; i++ {
        @printf("%c", code[i]);
    }
    @printf("\n\nProcessing\n\n");
    arr<i32, 10000> bracket_stack;
    i32 stack_ptr = 0;
    for i32 i = 0; i < code_len; i++ {
        if code[i] == 91 {  ?? '['
            bracket_stack[stack_ptr] = i;
            stack_ptr++;
        } else if code[i] == 93 {  ?? ']'
            if stack_ptr == 0 {
                @printf("Error: Unmatched ']'\n");
                return 1;
            }
            stack_ptr--;
            i32 open_pos = bracket_stack[stack_ptr];
            jump_table[open_pos] = i;
            jump_table[i] = open_pos;
        }
    }
    if stack_ptr != 0 {
        @printf("Error: Unmatched '['\n");
        return 1;
    }
    code_ptr = 0;
    mem_ptr = 0;
    
    for {
        if code_ptr >= code_len {break;}
        u8 c = code[code_ptr];
        
        if c == '+' {
            mem[mem_ptr]++;
        } else if c == '-' {
            mem[mem_ptr]--;
        } else if c == '<' {
            mem_ptr--;
        } else if c == '>' {
            mem_ptr++;
        } else if c == ',' {
            if @scanf("%c", &inp) == 1 {
                mem[mem_ptr] = inp;
            } else {
                mem[mem_ptr] = 0;
            }
        } else if c == '.' {
            @printf("%c", mem[mem_ptr]);
        } else if c == '[' {
            if code[code_ptr + 1] == '-' && code[code_ptr + 2] == ']' {
                mem[mem_ptr] = 0;
                code_ptr += 2;
            } else if code[code_ptr + 1] == '>' && code[code_ptr + 2] == ']' {
                for {
                    if mem_ptr >= 199999 {break;}
                    if mem[mem_ptr] == 0 {break;}
                    mem_ptr++;
                }
                code_ptr += 2;
            } else if code[code_ptr + 1] == '<' && code[code_ptr + 2] == ']' {
                for {
                    if mem_ptr <= 0 {break;}
                    if mem[mem_ptr] == 0 {break;}
                    mem_ptr--;
                }
                code_ptr += 2;
            } else if mem[mem_ptr] == 0 {
                code_ptr = jump_table[code_ptr];
            }
        } else if c == ']' {
            if mem[mem_ptr] != 0 {
                code_ptr = jump_table[code_ptr];
            }
        }
        code_ptr++;
    }
    return 0;
}