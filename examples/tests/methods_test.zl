struct Point {
    x i32,
    y i32
}

struct Rectangle {
    width i32,
    height i32
}

fun print_point(self: Point) >> void {
    @printf("Point(%d, %d)\n", self.x, self.y);
}

fun translate(self: Point, dx: i32, dy: i32) >> Point {
    Point result;
    result.x = self.x + dx;
    result.y = self.y + dy;
    return result;
}

fun distance_from_origin(self: Point) >> f64 {
    i32 x_squared = self.x * self.x;
    i32 y_squared = self.y * self.y;
    ?? we do not have sqrt function :(
    return x_squared + y_squared;
}

fun set_coords(self: Point, new_x: i32, new_y: i32) >> Point {
    Point updated;
    updated.x = new_x;
    updated.y = new_y;
    return updated;
}

fun print_rect(self: Rectangle) >> void {
    @printf("Rectangle(%dx%d)\n", self.width, self.height);
}

fun area(self: Rectangle) >> i32 {
    return self.width * self.height;
}

fun scale(self: Rectangle, factor: i32) >> Rectangle {
    Rectangle scaled;
    scaled.width = self.width * factor;
    scaled.height = self.height * factor;
    return scaled;
}

fun main() >> i32 {
    Point p1;
    p1.x = 3;
    p1.y = 4;

    @printf("Original point: ");
    p1.print_point();

    ?? Test method with return value
    f64 dist = p1.distance_from_origin();
    @printf("Distance from origin: expected(25.0):%.1f\n", dist);

    ?? Test method with parameters returning new struct
    Point p2 = p1.translate(10, 20);
    @printf("Translated point: ");
    p2.print_point();

    ?? Test method that modifies coordinates
    Point p3 = p1.set_coords(100, 200);
    @printf("Updated point: ");
    p3.print_point();

    ?? Test Rectangle methods
    Rectangle rect;
    rect.width = 5;
    rect.height = 8;

    @printf("Original rectangle: ");
    rect.print_rect();

    i32 rect_area = rect.area();
    @printf("Area: (expected 40):%d\n", rect_area);

    Rectangle big_rect = rect.scale(3);
    @printf("Scaled rectangle: ");
    big_rect.print_rect();

    i32 big_area = big_rect.area();
    @printf("Scaled area: (expected 360):%d\n", big_area);

    return 0;
}
