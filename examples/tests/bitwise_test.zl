fun main() >> i32 {
    ?? Bitwise AND tests
    i32 a = 12;    ?? 1100 in binary
    i32 b = 10;    ?? 1010 in binary
    i32 and_result = a & b;  ?? Should be 8 (1000 in binary)
    @printf("12 & 10 = (expected 8):%d\n", and_result);

    i32 or_result = a | b;   ?? Should be 14 (1110 in binary)
    @printf("12 | 10 = (expected 14):%d\n", or_result);

    i32 xor_result = a ^ b;  ?? Should be 6 (0110 in binary)
    @printf("12 ^ 10 = (expected 6):%d\n", xor_result);

    i32 left_shift = a << 2;  ?? 12 << 2 = 48
    @printf("12 << 2 = (expected 48):%d\n", left_shift);

    i32 right_shift = a >> 2; ?? 12 >> 2 = 3
    @printf("12 >> 2 = (expected 3):%d\n", right_shift);

    i32 not_result = ~a;     ?? ~12 should be -13
    @printf("~12 = (expected -13):%d\n", not_result);

    i32 c = 255;   ?? 11111111 in binary
    i32 d = 85;    ?? 01010101 in binary

    i32 and_test2 = c & d;
    i32 or_test2 = c | d;
    i32 xor_test2 = c ^ d;

    @printf("255 & 85 = (expected 85):%d\n", and_test2);
    @printf("255 | 85 = (expected 255):%d\n", or_test2);
    @printf("255 ^ 85 = (expected 170):%d\n", xor_test2);

    i32 big_val = 1000;
    i32 left_big = big_val << 3;   ?? 1000 << 3 = 8000
    i32 right_big = big_val >> 3;  ?? 1000 >> 3 = 125

    @printf("1000 << 3 = (expected 8000):%d\n", left_big);
    @printf("1000 >> 3 = (expected 125):%d\n", right_big);

    i32 not_zero = ~0;       ?? Should be -1
    i32 not_neg = ~(-1);     ?? Should be 0

    @printf("~0 = (expected -1): %d\n", not_zero);
    @printf("~(-1) = (expected 0): %d\n", not_neg);

    ?? Test bitwise reassignment operators
    i32 test_and = 15;     ?? 1111 in binary
    test_and &= 7;         ?? 1111 & 0111 = 0111 = 7
    @printf("15 &= 7 = (expected 7): %d\n", test_and);

    i32 test_or = 12;      ?? 1100 in binary
    test_or |= 3;          ?? 1100 | 0011 = 1111 = 15
    @printf("12 |= 3 = (expected 15): %d\n", test_or);

    i32 test_xor = 12;     ?? 1100 in binary
    test_xor ^= 10;        ?? 1100 ^ 1010 = 0110 = 6
    @printf("12 ^= 10 = (expected 6): %d\n", test_xor);

    i32 test_lshift = 5;   ?? 5 in binary is 101
    test_lshift <<= 2;     ?? 101 << 2 = 10100 = 20
    @printf("5 <<= 2 = (expected 20): %d\n", test_lshift);

    i32 test_rshift = 80;  ?? 80 in binary
    test_rshift >>= 3;     ?? 80 >> 3 = 10
    @printf("80 >>= 3 = (expected 10): %d\n", test_rshift);

    ?? Test multiple operations on same variable
    i32 multi_test = 24;   ?? 11000 in binary
    multi_test &= 30;      ?? 11000 & 11110 = 11000 = 24
    @printf("24 &= 30 = (expected 24): %d\n", multi_test);
    multi_test |= 7;       ?? 11000 | 00111 = 11111 = 31
    @printf("24 |= 7 = (expected 31): %d\n", multi_test);
    multi_test ^= 15;      ?? 11111 ^ 01111 = 10000 = 16
    @printf("31 ^= 15 = (expected 16): %d\n", multi_test);

    return 0;
}
