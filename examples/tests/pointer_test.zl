fun testPointerParameter(ptr: ptr<i32>) >> void {
    @printf("Function received pointer: %p\n", ptr);
}

fun testAllTypes() >> i32 {
    @printf("=== Testing All Pointer Types ===\n");

    bool b = true;
    ptr<bool> pb = &b;
    @printf("bool pointer: %p\n", pb);

    i8 i8v = -42;
    ptr<i8> pi8 = &i8v;
    @printf("i8 pointer: %p\n", pi8);

    u8 u8v = 255;
    ptr<u8> pu8 = &u8v;
    @printf("u8 pointer: %p\n", pu8);

    i16 i16v = -1000;
    ptr<i16> pi16 = &i16v;
    @printf("i16 pointer: %p\n", pi16);

    u16 u16v = 65535;
    ptr<u16> pu16 = &u16v;
    @printf("u16 pointer: %p\n", pu16);

    i32 i32v = (-2147483648 as _);
    ptr<i32> pi32 = &i32v;
    @printf("i32 pointer: %p\n", pi32);

    u32 u32v = 4294967295;
    ptr<u32> pu32 = &u32v;
    @printf("u32 pointer: %p\n", pu32);

    i64 i64v = (-9223372036854775808 as _);
    ptr<i64> pi64 = &i64v;
    @printf("i64 pointer: %p\n", pi64);

    u64 u64v = 18446744073709551615;
    ptr<u64> pu64 = &u64v;
    @printf("u64 pointer: %p\n", pu64);

    f16 f16v = 1.5;
    ptr<f16> pf16 = &f16v;
    @printf("f16 pointer: %p\n", pf16);

    f32 f32v = 3.14159;
    ptr<f32> pf32 = &f32v;
    @printf("f32 pointer: %p\n", pf32);

    f64 f64v = 2.718281828459;
    ptr<f64> pf64 = &f64v;
    @printf("f64 pointer: %p\n", pf64);

    return 13;
}

fun test_simple_return() >> i32 {
    return 42;
}

fun test_ptr_simple() >> ptr<i32> {
    i32 x = 10;
    return &x;
}

fun test_double_nested() >> ptr<ptr<i32>> {
    i32 x = 20;
    ptr<i32> xptr = &x;
    return &xptr;
}

fun test_triple_nested() >> ptr<ptr<ptr<i32>>> {
    i32 x = 30;
    ptr<i32> xptr = &x;
    ptr<ptr<i32>> xptrptr = &xptr;
    return &xptrptr;
}

fun test_quadruple_nested() >> ptr<ptr<ptr<ptr<i32>>>> {
    i32 x = 40;
    ptr<i32> xptr = &x;
    ptr<ptr<i32>> xptrptr = &xptr;
    ptr<ptr<ptr<i32>>> xptrptrptr = &xptrptr;
    return &xptrptrptr;
}

fun test_simple_expr() >> i32 {
    i32 x = 8;
    return x + 1;
}

fun test_multiple_operations() >> i32 {
    i32 x = 32;
    i32 y = x + 2;
    return y - 1;
}

fun test_nested_and_expr(val: i32) >> ptr<ptr<i32>> {
    i32 x = val + 1;
    ptr<i32> xptr = &x;
    return &xptr;
}

fun test_complex_expr() >> i32 {
    i32 a = 16;
    i32 b = 4;
    return (a + 1) + (b + 2);
}

fun test_mixed_operations() >> i32 {
    i32 x = 100;
    x = x + 2;
    x = x + 5;
    return x;
}

fun test_nested_in_param(p: ptr<ptr<i32>>) >> i32 {
    return 0;
}

fun test_deeply_nested_param(p: ptr<ptr<ptr<ptr<i32>>>>) >> ptr<ptr<i32>> {
    ptr<ptr<i32>> result = null;
    return result;
}

fun add(a: i32, b: i32) >> i32 {return a + b;}
fun realloc_i32(p: ptr<i32>) >> ptr<i32> {return p;}

fun main() >> i32 {
    @printf("=== Comprehensive Pointer Test ===\n\n");

    i32 types_tested = testAllTypes();
    @printf("(expected 13):%d\n", types_tested);

    @printf("\n=== Testing Pointer Operations ===\n");

    i32 x = 42;
    i32 y = 100;
    ptr<i32> p = &x;

    @printf("(expected 42):%d\n", x);
    @printf("(expected 100):%d\n", y);
    @printf("p points to: %p\n", p);

    p = &y;
    @printf("After reassigning to y:\n");
    @printf("p now points to: %p\n", p);

    @printf("Testing function with pointer parameter...\n");
    ptr<i32> px = &x;
    testPointerParameter(px);

    @printf("\n=== Test Complete ===\n");
    
    test_simple_return();
    test_ptr_simple();
    test_double_nested();
    test_triple_nested();
    test_quadruple_nested();
    i32 expr_result = test_simple_expr();
    i32 multi_ops = test_multiple_operations();
    ptr<ptr<i32>> mixed_result = test_nested_and_expr(64);
    i32 complex_result = test_complex_expr();
    i32 mixed_ops = test_mixed_operations();
    test_nested_in_param(null);
    ptr<ptr<i32>> deep_result = test_deeply_nested_param(null);
    ptr<ptr<i32>> double_ptr = null;
    ptr<ptr<ptr<i32>>> triple_ptr = null;
    ptr<ptr<ptr<ptr<i32>>>> quad_ptr = null;
    i32 base = 128;
    i32 modified = base + 3;
    i32 double_modified = modified - 1;
    ?? function pointer tests
    ptr<i32(i32, i32)> math_fn = add;
    i32 sum = math_fn(5,4);
    @printf("(expected 9):%d\n", sum);
    ptr<ptr<i32>(ptr<i32>)> ptr_function = realloc_i32;
    ptr<i32> q = &x;
    ptr<i32> r = ptr_function(q);
    @printf("ptr_function call: %p -> %p\n", q, r);
    return 0;
}
