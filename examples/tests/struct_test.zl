struct Person {
    name arr<u8, 15>,
    age i32,
    is_male bool,
    id u64
}

struct Point {
    x i32,
    y i32
}

struct Line {
    start Point,
    end Point
}

fun print_info(p: Person) >> void {
    @printf("====Info====\nName: %s\nAge: %d\nMale: ", p.name, p.age);
    if p.is_male {@printf("yes\n");} else {@printf("no\n");}
    @printf("ID: %d\n", p.id);
}

fun gen_line(x1: i32, y1: i32, x2: i32, y2: i32) >> Line {
    Point lstart;
    lstart.x = x1;
    lstart.y = y1;
    Point lend;
    lend.x = x2;
    lend.y = y2;
    Line res;
    res.start = lstart;
    res.end = lend;
    return res;
} 

fun main() >> i32 {
    Person alex;
    Point origin;

    alex.name = "Alex Johnson";
    alex.age = 25;
    alex.id = 12345;
    alex.is_male = true;

    origin.x = 10;
    origin.y = 20;

    @printf("Name: %s\n", alex.name);
    @printf("Age: (expected 25):%d\n", alex.age);

    i32 current_age = alex.age;
    i32 point_x = origin.x;
    @printf("(expected 35):%d\n", current_age + point_x);
    
    print_info(alex);
    Line tline = gen_line(0, 1, 2, 3);
    @printf("Line start: %d, %d\n", tline.start.x, tline.start.y);
    tline.start.x = 10;
    @printf("After assignment: %d, %d\n", tline.start.x, tline.start.y);
    arr<Line, 5> lines;
    i32 sum = 0;
    for i8 i = 0; i < 5; i++ {
        lines[i] = gen_line(i, i, i, i);
    }
    for i8 i = 0; i < 5; i++ {
        sum += lines[i].start.x;
    }
    @printf("(expected 10):%d\n", sum);
    return 0;
}